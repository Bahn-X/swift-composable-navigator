// AUTO-GENERATED: Do not edit
% import string
%{        
  letters = string.ascii_uppercase
  combineCount = 10
}%
import SwiftUI

% for i in range(2, combineCount+1):
%{
  genericCharacters = letters[0:i]
  requirements = ", ".join(map(lambda x: "{0}: View".format(x), genericCharacters))
  enumName = "Either{0}<{1}>".format(genericCharacters, requirements)
}%
/// An either type, representing up to ${i} different view types
public enum ${enumName}: View {
%   for c in genericCharacters: 
  case ${c.lower()}(${c}) 
% end

  public var body: some View {
    switch self {
%   for c in genericCharacters: 
    case let .${c.lower()}(${c}):
      ${c}
% end
    }
  }
}

% end
public extension PathBuilders {
% for i in range(2, combineCount+1):
%{
    # ABCD...
    genericCharacters = letters[0:i]
    genericCharactersLower = map(string.lower, genericCharacters)

    # BCD...
    allButFirst = genericCharacters[1:]
    allButFirstLower = map(string.lower, allButFirst)

    # A, B, C, D...
    genericTypeList = ", ".join(genericCharacters)

    # A,\n B\n, ...
    requirements = ",\n".join(map(lambda x: "    {0}".format(x), genericCharacters))

    # ABuilder: PathBuilder, BBuilder: PathBuilder, ...
    builderRequirements = ",\n".join(map(lambda x: "    {0}Builder: PathBuilder".format(x), genericCharacters))

    # Combined<A, B, C, D>
    enumName = "Either{0}<{1}>".format(genericCharacters, genericTypeList)

    # _ a: PathBuilder<A>,\n ...
    parameters = ",\n".join(map(lambda x: "    _ {0}: {1}Builder".format(x.lower(), x), genericCharacters))

    # ABuilder.Content == A
    whereCondition = "where " + ",\n        ".join(map(lambda x: "{0}Builder.Content == {0}".format(x), genericCharacters))

    # PathBuilder<Either<A, B, C, D>>
    combinedPathBuilderType = "_PathBuilder<{0}>".format(enumName)
}%
  /// ```swift
  /// .screen(
  /// //  ...
  ///   nesting: PathBuilders.anyOf(
  ///     SettingsScreen.Builder(store: settingsStore),
  ///     DetailScreen.Builder(store: detailStore)
  ///   )
  /// )
  /// ...
  /// ```
  ///
  /// If a screen can have more than one possible successor, the AnyOf `PathBuilder` allows to branch out. In the example, the Home Screen can either route to the Settings or the Detail screen. We express these two possible navigation paths by passing an anyOf `PathBuilder` as a `nesting` argument.
  ///
  /// Read AnyOf `PathBuilder`s as "any of the listed `PathBuilder` builds the path". Given our example, the settings and the detail screen can follow after the home screen. AnyOf allows us to branch out in this case. The resulting app navigation tree would be:
  ///
  /// ```
  ///           -- Settings
  ///   Home ---
  ///           -- Detail
  /// ```
  ///
  /// Keep in mind, that the order of the listed `PathBuilder`s matters. The first `PathBuilder`s that can handle the path will build it.
  ///
  /// ⚠️ The anyOf PathBuilder is limited to 10 elements, stack .anyOf `PathBuilder`s if a screen can be followed up by more than ten screens ⚠️
  /// ```swift
  ///  .screen(
  ///    //  ...
  ///      nesting: .anyOf(
  ///        .anyOf(
  ///        // ... up to 10 `PathBuilder`s here
  ///        ),
  ///        .anyOf(
  ///        // ... the other `PathBuilder`s
  ///        )
  ///      )
  ///  )
  /// ...
  /// ```
  static func anyOf<
${requirements},
${builderRequirements}
  >(
${parameters}
  ) -> ${combinedPathBuilderType}
  ${whereCondition}
  {
    ${combinedPathBuilderType}(
      buildPath: { path -> ${enumName}? in 
        if let aContent = a.build(path: path) {
% for c in allButFirstLower:
          _ = ${c}.build(path: path.ignoringCurrent)
% end
          return .a(aContent)
        }
% for c in allButFirstLower:
        else if let ${c}Content = ${c}.build(path: path) {
% for inner in filter(lambda inner: inner > c, allButFirstLower):
          _ = ${inner}.build(path: path.ignoringCurrent)
% end
          return .${c}(${c}Content)
        }
% end
        else {
          return nil
        }
      }
    )
  }
% end
}
