// AUTO-GENERATED: Do not edit
% import string
%{
letters = string.ascii_uppercase
combineCount = 10
}%
import ComposableNavigator
import SnapshotTesting
import SwiftUI
import XCTest

final class PathBuilder_AnyOfTests: XCTestCase {
  struct NonMatching: Screen {
    let presentationStyle: ScreenPresentationStyle = .push
  }

%{
  genericCharacters = letters[0:combineCount]
}%
% for character in genericCharacters:
  struct ${character}Screen: Screen {
    let presentationStyle: ScreenPresentationStyle = .push
  }

% end
% for i in range(2, combineCount+1):
%{
  # ABCD...
  genericCharacters = letters[0:i]
  genericCharactersLower = map(string.lower, genericCharacters)
}%
  func test_${i}_buildsPath() {
    var path = PathComponentUpdate(previous: nil, current: nil)

    let sut = EmptyNavigationTree().AnyOf {
% for inner in range(0, i):
%{
  innerChar = genericCharacters[inner]
}%
      PathBuilders.screen(
        ${innerChar}Screen.self,
        content: { Text("${innerChar}") }
      )
  % end
    }

% for inner in range(0, i):
%{
  innerChar = genericCharacters[inner]
  innerCharLower = genericCharactersLower[inner]
}%
    // MARK: ${innerCharLower}Screen
    let ${innerCharLower}Screen = ${innerChar}Screen()
    path = PathComponentUpdate(
      previous: nil,
      current: IdentifiedScreen(
        id: .root,
        content: ${innerCharLower}Screen,
        hasAppeared: false
      )
    )

    let ${innerCharLower}BuiltView = sut.build(path: path)

    guard case .${innerCharLower} = ${innerCharLower}BuiltView else {
      XCTFail("Expected \(${innerChar}Screen.self) to build Either.${innerCharLower}. Got \(${innerCharLower}BuiltView.debugDescription).")
      return 
    }

    assertSnapshot(
      matching: ${innerCharLower}BuiltView
        .frame(width: 20, height: 20)
        .environmentObject(Navigator.Datasource(path: [])),
      as: .image
    )

% end
    path = PathComponentUpdate(
      previous: nil,
      current: IdentifiedScreen(
        id: .root,
        content: NonMatching(),
        hasAppeared: false
      )
    )

    let nonMatchingBuilt = sut.build(
      path: path
    )

    XCTAssertNil(nonMatchingBuilt)
  }
% if i != combineCount:

% else:
% end
% end
}
